# -*- coding: utf-8 -*-
"""Script_Tutorial5_12821039.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gfU2P277e6xWvPa0kRle6d8upesSCeCl

# Tugas Tutorial 4
# ME3102 Analisis Data Cuaca dan Iklim I
## Nama : Nafal Shaquille Muhammad
## NIM : 12821039

## Mount Google Drive
"""

from google.colab import drive
drive.mount('/content/drive')

"""## Instalasi Package Yang Diperlukan"""

!pip install importlib-metadata==4.13.0
!pip uninstall -y xarray netCDF4
!pip install netCDF4==1.5.0
!pip install xarray==0.19.0
!pip install siphon cartopy

"""## Import Modul-Modul Yang Digunakan"""

import warnings
warnings.simplefilter('ignore')
import numpy as np
import matplotlib.pyplot as plt
import cartopy.crs as ccrs
import cartopy.feature as cfeature
import os
import xarray as xr
from datetime import datetime
from siphon.catalog import TDSCatalog
from xarray.backends import NetCDF4DataStore

"""## Pendefinisian Fungsi Time Lag GFS"""

def timelagGFS(file_list,varname,domain,valid_time_start,valid_time_end):
  # Untuk member pertama
  m=TDSCatalog(file_list[0])
  print(m)
  ds=list(m.datasets.values())[0]
  ncss=ds.subset()
  query=ncss.query()
  query.lonlat_box(north=domain['north'],south=domain['south'],east=domain['east'],west=domain['west'])
  query.time_range(start=valid_time_start,end=valid_time_end)
  query.accept('netcdf4')
  query.variables(varname)
  # Dapatkan Data
  data = xr.open_dataset(NetCDF4DataStore(ncss.get_data(query)))
  data=data.rename({data[varname].dims[0]:'time'})

  # Looping untuk member lainnya
  for mem in file_list[1:]:
    m= TDSCatalog(mem)
    print(m)
    ds=list(m.datasets.values())[0]
    ncss=ds.subset()

    query=ncss.query()
    query.lonlat_box(north=llbox['north'], south=llbox['south'], east=llbox['east'], west=llbox['west'])
    query.time_range(start=valid_s,end=valid_e)
    query.accept('netcdf4')
    query.variables(varname)

    #Dapatkan data
    dat = xr.open_dataset(NetCDF4DataStore(ncss.get_data(query)))
    dat=dat.rename({dat[varname].dims[0]: 'time'})

    #Gabungkan data-data
    data=xr.concat([data,dat],"member")

  return data

"""## Program Utama Time Lag"""

listTimeLag=['https://thredds.ucar.edu/thredds/catalog/grib/NCEP/GFS/Global_0p25deg/GFS_Global_0p25deg_20231030_0000.grib2/catalog.xml',
               'https://thredds.ucar.edu/thredds/catalog/grib/NCEP/GFS/Global_0p25deg/GFS_Global_0p25deg_20231030_0600.grib2/catalog.xml',
               'https://thredds.ucar.edu/thredds/catalog/grib/NCEP/GFS/Global_0p25deg/GFS_Global_0p25deg_20231030_1200.grib2/catalog.xml',
               'https://thredds.ucar.edu/thredds/catalog/grib/NCEP/GFS/Global_0p25deg/GFS_Global_0p25deg_20231030_1800.grib2/catalog.xml',
               'https://thredds.ucar.edu/thredds/catalog/grib/NCEP/GFS/Global_0p25deg/GFS_Global_0p25deg_20231029_0000.grib2/catalog.xml',
               'https://thredds.ucar.edu/thredds/catalog/grib/NCEP/GFS/Global_0p25deg/GFS_Global_0p25deg_20231029_0600.grib2/catalog.xml',
               'https://thredds.ucar.edu/thredds/catalog/grib/NCEP/GFS/Global_0p25deg/GFS_Global_0p25deg_20231029_1200.grib2/catalog.xml',
               'https://thredds.ucar.edu/thredds/catalog/grib/NCEP/GFS/Global_0p25deg/GFS_Global_0p25deg_20231029_1800.grib2/catalog.xml',
               'https://thredds.ucar.edu/thredds/catalog/grib/NCEP/GFS/Global_0p25deg/GFS_Global_0p25deg_20231028_0000.grib2/catalog.xml',
               'https://thredds.ucar.edu/thredds/catalog/grib/NCEP/GFS/Global_0p25deg/GFS_Global_0p25deg_20231028_0600.grib2/catalog.xml',
               'https://thredds.ucar.edu/thredds/catalog/grib/NCEP/GFS/Global_0p25deg/GFS_Global_0p25deg_20231028_1200.grib2/catalog.xml',
               'https://thredds.ucar.edu/thredds/catalog/grib/NCEP/GFS/Global_0p25deg/GFS_Global_0p25deg_20231028_1800.grib2/catalog.xml']

"""### Cek Parameter Data"""

paramCheck=TDSCatalog('https://thredds.ucar.edu/thredds/catalog/grib/NCEP/GFS/Global_0p25deg/GFS_Global_0p25deg_20231030_0000.grib2/catalog.xml')

ds=list(paramCheck.datasets.values())[0]
ncss=ds.subset()

ncss.variables

var1='Precipitation_rate_surface'
var2='Temperature_surface'
var3='Relative_humidity_height_above_ground'

llbox={'north':15,
       'south':-15,
       'west':90,
       'east':150}
valid_s=datetime(2023,10,28,0,0)
valid_e=datetime(2023,10,30,21,0)

tlag_var1=timelagGFS(listTimeLag,var1,llbox,valid_s,valid_e)
tlag_var2=timelagGFS(listTimeLag,var2,llbox,valid_s,valid_e)
tlag_var3=timelagGFS(listTimeLag,var3,llbox,valid_s,valid_e)

tlag_var13=tlag_var1*3600*3 # Untuk mengakumulasi data 3 jam
tlag_var2c=tlag_var2-273.15 # Mengkonversi satuan dari Kelvin ke Celsius

"""### Inisiasi Waktu Plot Data"""

timeArr=['2023-10-28 00:00','2023-10-28 03:00','2023-10-28 06:00','2023-10-28 09:00',
      '2023-10-28 12:00','2023-10-28 15:00','2023-10-28 18:00','2023-10-28 21:00',
      '2023-10-29 00:00','2023-10-29 03:00','2023-10-29 06:00','2023-10-29 09:00',
      '2023-10-29 12:00','2023-10-29 15:00','2023-10-29 18:00','2023-10-29 21:00',
      '2023-10-30 00:00','2023-10-30 03:00','2023-10-30 06:00','2023-10-30 09:00',
      '2023-10-30 12:00','2023-10-30 15:00','2023-10-30 18:00','2023-10-30 21:00']

"""### Inisiasi Path Tujuan Hasil Gambar"""

filepath='/content/drive/MyDrive/ANDAT1/Tutorial_5/HasilGambar/'

"""### Plot Gambar Untuk Area Presipitasi"""

thPr = 0.5

for i in timeArr:
  dat=tlag_var13[var1].sel(time=i)
  prob=np.sum(dat>thPr,axis=0)/12
  fig = plt.figure(figsize=(16,8))
  ax = plt.axes(projection=ccrs.PlateCarree())
  prob.plot(transform=ccrs.PlateCarree(),
            vmin=0.0,
            vmax=1.0,
            cmap='coolwarm',
            cbar_kwargs={'shrink':0.4,
                         'label':'Probability'})

  ax.set_extent([95,150,-10,10])
  ax.add_feature(cfeature.BORDERS, edgecolor='gray')
  ax.add_feature(cfeature.COASTLINE, edgecolor='black')
  ocean = cfeature.NaturalEarthFeature('physical', 'ocean',scale='10m', edgecolor='none', facecolor=cfeature.COLORS['water']) #laut
  ax.add_feature(ocean, linewidth=0.2 )
  ax.gridlines(draw_labels=True,linestyle=":")
  plt.title('Probability Surface Precipitation '+i+' UTC',fontsize=20)
  plt.savefig(filepath+"Prate"+i+'.png')

"""### Plot Meteogram Presipitasi"""

dates=[datetime(2023,10,28),
       datetime(2023,10,29),
       datetime(2023,10,30)]
date_labels=[date.strftime('%Y-%m-%d') for date in dates]

var_precip = tlag_var13[var1].resample(time='24H').sum()
loc=[-6.911753343427301, 107.59658780800262]
ts_var1=var_precip.sel(longitude=loc[1],latitude=loc[0],method='nearest')
plt.boxplot(ts_var1)
plt.xticks([1,2,3],date_labels)
plt.ylabel('Precipitation Rate (mm/day)')
plt.title('Boxplot Precipitation')
plt.savefig(filepath+"Boxplot Prate.png")

"""### Plot Gambar Untuk Temperatur"""

thTemp = 27.

for i in timeArr:
  dat=tlag_var2c[var2].sel(time=i)
  prob=np.sum(dat>thTemp,axis=0)/12
  fig = plt.figure(figsize=(16,8))
  ax = plt.axes(projection=ccrs.PlateCarree())
  prob.plot(transform=ccrs.PlateCarree(),
            vmin=0.0,
            vmax=1.0,
            cmap='jet',
            cbar_kwargs={'shrink':0.4,
                         'label':'Probability'})

  ax.set_extent([95,150,-10,10])
  ax.add_feature(cfeature.BORDERS, edgecolor='gray')
  ax.add_feature(cfeature.COASTLINE, edgecolor='black')
  ocean = cfeature.NaturalEarthFeature('physical', 'ocean',scale='10m', edgecolor='none', facecolor=cfeature.COLORS['water']) #laut
  ax.add_feature(ocean, linewidth=0.2 )
  ax.gridlines(draw_labels=True,linestyle=":")
  plt.title('Probability Temperatur >27`C '+i+' UTC',fontsize=20)
  plt.savefig(filepath+"Temp"+i+'.png')

"""### Plot Meteogram Temperatur"""

var_temp = tlag_var2c[var2].resample(time='24H').mean()
loc=[-6.911753343427301, 107.59658780800262]
ts_var2=var_temp.sel(longitude=loc[1],latitude=loc[0],method='nearest')
plt.boxplot(ts_var2)
plt.xticks([1,2,3],date_labels)
plt.ylabel('Temperatur (Celcius)')
plt.title('Boxplot Temperatur')
plt.savefig(filepath+"Boxplot Temp.png")

"""### Plot Gambar untuk RH"""

thRh = 60.

for i in time:
  dat=tlag_var3[var3].sel(time=i)
  prob=np.sum(dat>thRh,axis=0)/12
  fig = plt.figure(figsize=(16,8))
  ax = plt.axes(projection=ccrs.PlateCarree())
  prob.plot(transform=ccrs.PlateCarree(),
            vmin=0.0,
            vmax=1.0,
            cmap='summer',
            cbar_kwargs={'shrink':0.4,
                         'label':'Probability'})

  ax.set_extent([95,150,-10,10])
  ax.add_feature(cfeature.BORDERS, edgecolor='gray')
  ax.add_feature(cfeature.COASTLINE, edgecolor='black')
  ocean = cfeature.NaturalEarthFeature('physical', 'ocean',scale='10m', edgecolor='none', facecolor=cfeature.COLORS['water']) #laut
  ax.add_feature(ocean, linewidth=0.2 )
  ax.gridlines(draw_labels=True,linestyle=":")


  plt.title('Probability Relative Humidity Height Above Ground > 60% '+i+' UTC',fontsize=20)
  plt.savefig(filepath+"Hum"+i+'.png')

"""### Plot Meteogram untuk RH"""

var_hum = tlag_var3[var3].resample(time='24H').mean()
loc=[-6.911753343427301, 107.59658780800262]
ts_var3=var_hum.sel(longitude=loc[1],latitude=loc[0],method='nearest')
ts_var3=ts_var3.isel(height_above_ground4=0)
plt.boxplot(ts_var3)
plt.xticks([1,2,3],date_labels)
plt.ylabel('Relative Humidity (%)')
plt.title('Boxplot RH')
plt.savefig(filepath+"Boxplot Humidity.png")